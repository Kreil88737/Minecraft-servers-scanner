import asyncio
import re
from mcstatus import JavaServer


def clean_motd(motd):
    """–£–¥–∞–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã."""
    if motd is None:
        return ""
    motd = str(motd)
    motd = re.sub(r'¬ß.', '', motd)  # —É–±—Ä–∞—Ç—å —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã (¬ßx)
    motd = motd.replace('\n', ' ').replace('\r', ' ')
    motd = re.sub(r'\s+', ' ', motd).strip()
    return motd


def is_valid_lan_motd(motd: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ MOTD –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç LAN:
    <—Ç–µ–∫—Å—Ç –∏–∑ [A-Za-z0-9_ –∏ –ø—Ä–æ–±–µ–ª–æ–≤]> - <–ª—é–±–æ–π —Ç–µ–∫—Å—Ç>
    """
    # –¥–æ–ø—É—Å—Ç–∏–º–∞—è —á–∞—Å—Ç—å –ø–µ—Ä–µ–¥ –¥–µ—Ñ–∏—Å–æ–º
    pattern = r'^[A-Za-z0-9_ ]+\s*-\s*.+$'
    return bool(re.match(pattern, motd))


async def check(ip, port, semaphore, timeout=3.0):
    async with semaphore:
        try:
            server = JavaServer(ip, port)
            status = await asyncio.wait_for(server.async_status(), timeout=timeout)

            # –ü—Ä–æ–±—É–µ–º query
            try:
                await asyncio.wait_for(server.async_query(), timeout=timeout)
                query_status = True
            except Exception:
                query_status = False

            motd = clean_motd(status.description)
            online = getattr(status.players, "online", 0) or 0
            max_players = getattr(status.players, "max", 0)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —É—Å–ª–æ–≤–∏—è–º LAN
            is_lan = (
                " - " in motd and
                online >= 1 and
                max_players == 8 and
                is_valid_lan_motd(motd)
            )

            server_type = "üü† LAN-–º–∏—Ä (–æ—Ç–∫—Ä—ã—Ç –¥–ª—è —Å–µ—Ç–∏)" if is_lan else "üü¢ –ü—É–±–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä"

            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
            players_sample = None
            try:
                sample = status.players.sample
                if sample:
                    names = []
                    for p in sample:
                        if isinstance(p, dict) and "name" in p:
                            names.append(p["name"])
                        else:
                            names.append(getattr(p, "name", str(p)))
                    players_sample = ", ".join(names)
            except Exception:
                players_sample = None

            latency = f"{round(status.latency)} ms" if status.latency is not None else "n/a"

            print(f"{ip}:{port} ‚îÇ {status.version.name} ‚îÇ "
                  f"{online}/{max_players} ‚îÇ {latency} ‚îÇ query:{query_status} ‚îÇ "
                  f"{server_type} ‚îÇ MOTD: {motd}"
                  + (f" ‚îÇ Players: {players_sample}" if players_sample else ""))

            if online > 0:
                with open("result.txt", "a", encoding="utf-8") as file:
                    file.write(f"\n{ip}:{port}")

        except Exception:
            pass


async def scan_servers(ip: str, ports, timeout: float = 1.2):
    semaphore = asyncio.Semaphore(50)
    tasks = [check(ip, port, semaphore, timeout) for port in ports]
    await asyncio.gather(*tasks)


async def scan_serv(ip: str, ports, timeout: float = 1.2):
    await scan_servers(ip, ports, timeout)